use clap::Parser;
use serde::Deserialize;
use std::fs;
use std::io::{self, Read};
use std::path::Path;

#[derive(Parser, Debug)]
#[command(name = "graphqlgen-apollo")]
struct Args {
    #[arg(long)]
    output: String,
}

#[derive(Deserialize)]
struct ParsedSchema {
    source: String,
    definitions: Vec<String>,
}

fn main() {
    let args = Args::parse();

    // Read schema JSON from stdin
    let mut buffer = String::new();
    io::stdin().read_to_string(&mut buffer).expect("Failed to read stdin");

    let schema: ParsedSchema =
        serde_json::from_str(&buffer).expect("Failed to parse schema JSON");

    let output_dir = Path::new(&args.output);
    fs::create_dir_all(output_dir).expect("Failed to create output dir");

    let file_path = output_dir.join("apollo-client.ts");

    let content = format!(
        "// Auto-generated by graphqlgen-apollo\n// Source: {}\n\n{}",
        schema.source,
        schema
            .definitions
            .iter()
            .map(|d| format!("// {d}"))
            .collect::<Vec<_>>()
            .join("\n")
    );

    fs::write(&file_path, content).expect("Failed to write output file");

    println!("âœ… Apollo plugin generated file at {}", file_path.display());
}
