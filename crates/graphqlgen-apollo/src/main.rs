use std::{fs, path};
use std::io::{self, BufRead, Read};
use serde::Deserialize;

mod generator;

#[derive(Deserialize)]
struct ParsedSchema {
    source: String,
    definitions: Vec<String>,
}

fn main() {
    let stdin = io::stdin();
    let mut handle = stdin.lock();

    let mut output_buffer = String::new();
    handle
        .read_line(&mut output_buffer)
        .expect("Failed to read output buffer");

    println!("Received output buffer: {}", output_buffer);

    let output: &str = &output_buffer;

    let mut buffer = String::new();
    handle
        .read_to_string(&mut buffer)
        .expect("Failed to read schema JSON");

    println!("Received schema JSON: {}", buffer);
    let schema: ParsedSchema =
        serde_json::from_str(&buffer).expect("Failed to parse schema JSON");

    let output_dir = path::Path::new(&output)
        .parent()
        .expect("Failed to get parent directory")
        .to_path_buf();

    fs::create_dir_all(&output_dir).expect("Failed to create output dir");

    generator::apollo_config::generate_apollo_config(&output)
        .expect("Failed to generate Apollo config");

    generator::apollo_queries::generate_apollo_queries(&output, &schema).expect("Failed to generate Apollo queries");

    let file_path = output_dir.join("generated_apollo.ts");

    let content = format!(
        "// Auto-generated by graphqlgen-apollo\n// Source: {}\n\n{}",
        schema.source,
        schema
            .definitions
            .iter()
            .map(|d| format!("// {d}"))
            .collect::<Vec<_>>()
            .join("\n"));

    fs::write(&file_path, content).expect("Failed to write output file");

    println!("âœ… Apollo plugin generated file at {}", file_path.display());
}
