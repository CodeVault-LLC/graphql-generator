use crate::ParsedSchema;

// Make a function which generates the queries for the apollo client:
/*
const GET_LOCATIONS = gql`
  query GetLocations {
    locations {
      id
      name
      description
      photo
    }
  }
`;
*/

const QUERY_TEMPLATE: &str = r#"
const {caps_name} = gql`
  query {name} {{
    {fields}
  }}
`;"#;

// Then return the variable names.
pub fn generate_apollo_queries(output: &str, schema: &ParsedSchema) -> Result<(), Box<dyn std::error::Error>> {
    let output_dir = std::path::Path::new(output)
        .parent()
        .expect("Failed to get parent directory")
        .to_path_buf();

    std::fs::create_dir_all(&output_dir).expect("Failed to create output dir");

    let file_path = output_dir.join("apollo_queries.ts");

    // For each definition in the schema, generate a query.
    let mut queries = Vec::new();
    for definition in &schema.definitions {
        let name = &definition.name;
        let fields: Vec<String> = definition
        .fields
        .iter()
        .cloned()
        .collect();

        // Convert the fields to a comma-separated string.
        let fields_str = fields.join("\n    ");

        // Generate the query.
        let query = QUERY_TEMPLATE
            .replace("{caps_name}", &name.to_uppercase())
            .replace("{name}", name)
            .replace("{fields}", &fields_str);

        queries.push(query);
    }

    // Write the queries to the output file.
    let content = format!(
        "// Auto-generated by graphqlgen-apollo\n// Source: {}\n\n{}",
        schema.source,
        queries.join("\n")
    );

    std::fs::write(&file_path, content).expect("Failed to write output file");

    Ok(())
}
